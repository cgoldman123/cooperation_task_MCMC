model {
    for (s in 1:NS) {
        for (b in 1:num.blocks) {

          for (pol in 1:3) {
              for (k in 1:3) {
                a[s,b,1,k,pol] = p_a[s]
              }
          }

          for (t in 1:num.trials.per.block) {

            #all.actions[s, b, t] ~ ifelse(action.prob.sum[s,b,t] == 1, dcat(action.probs[s,b,t,]), dcat(equal.action.probs[])).
            #action.prob.sum[s,b,t] <- action.probs[s,b,t,1] + action.probs[s,b,t,2] + action.probs[s,b,t,3]
            #all.actions[s, b, t] ~ dcat(equal.action.probs[s,b,t,])
            all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
            
            for (pol in 1:3) {
               action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
               equal.action.probs[s,b,t,pol] <- pol

               transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
               #transformed.q[s,b,t,pol] <- alpha[s] * (q[s,b,t,pol])

               q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
               G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
               epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
               pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,pol]))
                
               
               for (k in 1:3) {
                   A[s,b,t,k,pol] <- a[s,b,t,k,pol]/sum(a[s,b,t,,pol])
                   info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
                   a.sums[s,b,t,k,pol] = sum(a[s,b,t,,pol])
               }
                
            }
            
            for (pol in 1:3) {
                for (k in 1:3) {
                    a[s,b,t+1,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
                    count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t]) && (pol == all.actions[s,b,t]),eta[s],0)
                    # count.to.add[s,b,t,k,pol] <- ifelse(pol == all.actions[s,b,t], ifelse(k == all.observations[s,b,t],eta[s],0),0)
                    counts.remembered[s,b,t,k,pol] <- a[s,b,t,k,pol]*omega[s]
                }

            }

          }
        }

        

        for (pol in 1:3) {
            softmaxed.C[s,pol] <- exp(C[s,pol])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
        }

        alpha[s] ~ dunif(1.1,5)
        C[s,1] <- cr[s]
        C[s,2] <- 0
        C[s,3] <- -cl[s]
        cr[s] ~ dunif(1,5)
        cl[s] ~ dunif(1,5)
        p_a[s] ~ dunif(2,5)
        omega[s] ~ dunif(.2,.8)
        eta[s] ~ dunif(.2,.7)
    }
    
    #equal.action.probs[2] <- 1/3
    #equal.action.probs[3] <- 1/3
    
}
           
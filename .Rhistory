}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- a[s,b,t-1,k,pol]*omega[s]
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,pol]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
A[1,1,1,,]
a[1,1,1,,]
a[1,1,2,,]
a[1,1,4,,]
A[1,1,4,,]
A[1,1,9,,]
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- a[s,b,t-1,k,pol]*omega[s]
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,pol]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
A[1,1,9,,]
A[1,1,4,,]
a[1,1,4,,]
a[1,1,1,,]
a[1,1,2,,]
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- (a[s,b,t-1,k,pol] - pa[s])*(1-omega[s]) + pa
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,pol]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
a[1,1,2,,]
a[1,1,9,,]
a[1,1,3,,]
all.observations[1,1,,]
all.observations[1,1,]
all.actions[1,1,]
all.actions[1,2,]
all.actions[1,1,]
a[1,1,1,,]
a[1,1,2,,]
a[1,1,3,,]
a[1,1,4,,]
a[1,1,3,,]
a[1,1,6,,]
A[1,1,6,,]
a_sums[1,1,6,,]
a.sums[1,1,6,,]
info.gain[1,1,6,,]
A[1,1,6,,]
A[1,1,10,,]
a[1,1,10,,]
info.gain[1,1,10,,]
epistemic.value[1,1,10,]
pragmatic.value[1,1,10,]
G[1,1,10,]
q[1,1,10,]
C
softmaxed.C
pragmatic.value[1,1,10,]
A[1,1,10]
A[1,1,10,,]
A[1,1,10,,1]
log(softmaxed.C[s,pol])
log(softmaxed.C[s,]
)
sum(A[1,1,10,,] * log(softmaxed.C[s,]))
A[1,1,10,,]
sum(A[1,1,10,,1] * log(softmaxed.C[s,]))
# priors ==============================================================
# task ==============================================================
# loop over subjects
"NS" <-
3
"num.forced.choices" <-
3
"num.trials.per.block" <-
16
"num.blocks" <-
30
"all.actions" <-
structure(c(2,2,2,1,1,1,3,3,3,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,1,1,1,2,2,2,3,3,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,2,2,3,1,2,1,1,1,1,1,1,1,1,1,3,2,3,2,3,1,1,2,3,2,3,1,3,3,1,1,2,2,1,2,2,2,3,3,2,2,2,1,2,2,3,1,3,3,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,1,2,2,1,1,1,1,2,2,2,3,2,1,2,1,2,3,2,2,1,1,2,1,2,1,1,3,2,3,1,1,2,1,1,1,2,1,1,3,1,1,2,3,3,3,3,1,3,1,2,1,2,3,1,3,1,3,2,1,2,2,2,1,2,3,2,3,1,1,2,3,1,2,2,1,1,1,2,3,1,1,2,1,2,1,1,1,3,3,3,1,2,1,1,1,1,3,1,3,2,3,2,3,2,1,3,1,2,3,3,2,3,1,1,2,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,1,3,1,3,3,1,1,1,1,3,2,2,1,1,1,1,1,2,1,3,2,3,1,2,3,2,3,1,2,2,3,1,1,2,1,1,1,3,2,1,2,2,1,2,1,1,1,1,3,2,1,2,1,1,1,3,2,1,2,1,2,3,3,1,1,3,1,3,1,2,2,1,1,1,3,1,3,1,2,1,1,2,1,1,1,1,2,1,2,1,1,1,1,3,3,1,1,1,2,3,3,2,1,1,2,1,1,3,1,3,3,3,1,2,3,2,3,1,3,2,3,1,2,2,1,1,1,2,3,1,2,2,1,2,1,2,1,2,3,2,1,1,1,1,1,2,1,1,1,3,2,1,2,1,1,1,2,1,1,2,2,1,1,1,1,1,3,1,2,1,1,2,1,3,1,1,3,2,2,2,1,1,1,1,3,1,1,1,2,1,2,3,1,1,2,2,1,2,1,2,1,3,1,2,3,3,1,1,3,2,2,1,2,2,1,1,1,2,1,1,3,1,1,2,2,2,1,3,2,2,1,1,1,1,1,2,1,1,1,2,2,1,2,1,1,3,2,1,1,2,2,1,1,1,2,1,3,3,2,1,2,2,1,2,1,1,2,2,3,1,1,1,1,1,1,1,1,1,1,1,2,3,2,1,2,1,1,2,1,2,1,1,1,1,3,3,2,1,2,2,2,1,2,2,1,1,1,2,1,1,3,3,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,2,1,1,1,2,3,1,2,3,1,1,3,2,3,2,1,1,1,3,3,2,1,3,2,1,2,1,1,1,3,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,1,1,1,2,3,3,3,1,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,1,3,3,1,1,2,2,3,1,2,1,1,2,1,2,2,3,1,1,1,3,1,1,3,1,1,1,2,3,2,1,1,1,3,3,1,1,2,3,1,2,1,1,1,3,2,2,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,2,1,1,1,1,3,3,2,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,2,1,1,1,1,2,2,2,1,3,1,1,1,3,1,1,3,1,1,1,2,2,3,1,1,1,3,1,1,1,1,1,1,2,1,1,3,1,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,3,2,1,1,1,1,2,1,1,1,1,1,3,3,2,2,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,1,1,1,1,1,2,2,3,1,3,1,1,1,2,1,1,2,1,1,1,2,1,3,1,2,1,3,2,3,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,1,1,3,1,2,1,3,2,2,1,1,2,1,2,2,2,1,1,1,2,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,3,1,1,2,2,1,3,1,1,1,2,1,1,1,2,3,1,1,2,1,1,2,3,1,1,2,1,3,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,2,3,3,3,1,1,1,1,1,2,1,2,1,1,1,2,2,1,2,2,1,1,2,1,1,1,1,1,1,2,2,2,3,1,2,2,1,1,1,2,2,3,1,1,1,2,1,1,1,1,3,1,1,2,2,1,1,2,1,1,2,1,3,2,3,1,3,2,2,1,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,3,2,1,1,1,1,2,3,3,1,1,2,2,2,1,2,2,1,1,2,1,1,3,1,1,1,2,2,2,2,1,1,1,1,2,1,2,2,3,1,1,1,2,2,1,1,1,2,1,1,1,3,1,1,2,1,1,2,1,3,1,1,1,3,2,2,1,1,1,1,2,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,3,2,3,1,1,3,1,1,2,1,2,2,3,1,3,3,3,2,1,2,1,1,1,1,1,1,2,1,1,1,2,2,2,2,1,1,1,1,1,3,2,2,2,1,1,1,2,2,2,1,1,1,1,3,1,2,1,2,2,1,1,2,1,3), .Dim=c(3,30,16))
"all.observations" <-
structure(c(2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,3,3,3,2,1,1,2,3,1,1,2,3,1,1,1,3,3,2,2,1,3,2,1,2,1,1,3,3,3,2,3,3,3,3,3,1,2,1,1,1,1,2,3,3,2,2,3,1,2,2,2,1,3,3,2,1,1,2,2,1,2,3,3,2,1,1,1,1,3,2,1,2,2,1,1,1,3,2,2,2,3,2,2,2,3,2,3,1,3,3,3,2,1,2,2,1,1,3,3,1,1,1,1,1,1,2,2,1,3,1,1,2,3,2,1,3,1,3,1,2,3,2,3,1,3,3,2,1,1,3,2,2,1,1,3,2,1,1,3,1,3,1,1,2,1,1,2,2,3,1,3,2,1,1,1,1,1,3,1,2,1,2,1,1,1,3,2,1,3,3,2,2,2,2,1,1,1,3,3,3,2,1,1,1,1,1,2,1,3,1,1,2,3,2,1,3,2,2,1,2,1,3,1,3,3,1,3,1,2,3,2,2,3,2,3,3,1,2,1,3,2,3,3,2,1,2,3,1,3,1,3,1,2,3,1,1,1,3,2,2,2,2,1,2,1,3,1,3,3,1,1,3,1,2,3,3,2,3,2,2,2,2,2,2,1,3,3,3,1,2,2,3,1,2,3,1,3,3,1,1,2,1,2,3,2,1,2,2,2,2,2,1,1,3,3,1,1,1,2,3,3,2,3,3,1,1,1,3,1,3,3,2,1,2,3,2,3,3,2,2,3,1,2,1,1,1,1,1,3,1,3,2,1,2,3,2,3,3,3,1,1,1,3,2,1,2,1,1,1,3,2,1,2,2,2,3,1,1,3,2,2,1,2,1,2,1,1,2,2,2,3,1,1,2,2,1,3,2,2,2,1,2,2,1,3,1,1,1,2,1,2,2,3,3,2,3,1,2,3,2,2,3,1,2,1,1,3,2,3,1,2,3,1,2,2,1,1,2,2,1,3,3,3,3,2,2,1,3,2,2,3,2,1,3,1,2,1,3,2,3,2,1,2,3,1,3,3,1,1,2,2,3,2,3,2,1,3,1,2,2,2,2,1,1,1,2,3,2,3,1,1,1,1,2,1,1,3,3,1,1,2,3,2,1,3,1,1,2,3,1,1,2,2,1,3,1,3,1,2,1,2,1,1,2,2,1,2,3,2,1,3,3,1,1,3,2,1,1,1,2,2,1,3,1,1,3,2,3,1,2,1,1,2,3,2,2,3,1,1,3,2,3,2,1,3,3,1,3,2,1,3,3,2,2,1,3,2,2,2,3,2,1,1,1,1,1,1,1,2,1,2,3,2,3,1,3,2,1,1,3,2,1,1,2,3,2,1,3,1,1,2,1,2,1,2,1,2,1,2,2,2,3,3,1,3,3,3,1,1,2,3,1,2,1,1,2,2,2,2,2,1,1,1,3,3,1,1,3,1,1,2,3,2,1,1,1,1,3,2,1,3,3,1,1,1,1,3,3,3,3,3,3,2,1,2,3,1,1,2,3,2,1,2,3,3,1,3,1,1,1,1,3,3,1,1,2,2,2,2,2,3,1,1,1,1,1,1,2,1,1,1,3,1,1,2,2,1,1,1,2,2,3,2,1,3,1,1,2,1,3,3,3,1,2,3,1,3,3,3,1,2,2,3,1,2,1,3,2,1,1,1,1,1,2,1,1,2,1,1,3,1,2,1,2,1,3,1,2,2,1,2,1,1,1,3,1,3,3,1,1,2,3,1,1,3,3,2,2,2,1,3,1,2,1,1,2,1,1,1,1,3,1,1,2,3,2,1,1,2,2,3,3,1,1,1,3,2,3,1,3,2,1,1,1,3,1,2,3,2,1,1,1,1,2,2,2,3,2,3,1,2,1,3,2,2,3,3,2,1,2,1,1,1,1,3,3,1,1,2,2,1,3,2,2,2,1,3,2,1,2,2,1,1,1,1,1,3,2,3,2,1,1,3,1,1,1,1,2,1,2,1,2,3,2,1,3,3,1,2,2,3,3,1,1,1,2,3,2,1,2,2,1,3,2,3,1,2,3,1,1,2,1,1,2,2,1,2,2,1,1,1,2,1,2,1,1,1,3,2,1,1,2,1,2,1,3,3,1,3,3,1,1,3,3,1,3,1,3,1,2,3,3,3,1,3,2,2,1,2,2,1,1,2,1,2,3,1,1,2,2,2,3,2,3,2,3,3,1,3,2,1,1,3,1,1,2,3,1,1,2,3,3,2,2,2,3,2,2,3,1,2,2,3,2,3,3,3,2,1,2,1,2,1,3,1,1,2,3,1,1,1,2,1,2,1,1,1,2,1,2,2,3,1,3,2,3,1,3,2,2,3,1,1,3,2,3,2,1,1,2,3,3,2,3,1,2,1,1,1,1,2,2,3,3,1,3,1,2,3,3,1,3,1,3,1,2,3,3,2,3,2,3,3,3,3,3,3,2,3,3,2,1,1,1,3,1,3,2,2,1,1,3,2,1,1,3,2,2,1,3,2,1,2,1,2,3,1,1,1,3,3,3,1,1,3,2,3,3,3,2,2,1,1,3,1,2,2,3,2,3,1,1,1,3,1,1,1,3,1,1,2,2,2,3,2,3,3,1,3,2,1,2,1,1,2,2,2,2,1,2,1,1,2,1,2,3,2,3,2,3,3,1,1), .Dim=c(3,30,16))
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- (a[s,b,t-1,k,pol] - pa[s])*(1-omega[s]) + pa
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
G[1,1,10,]
1[1,1,10,]
q[1,1,10,]
q[1,1,10,]
measures_ls = c("id", "CTQ_emoabuse", "CTQ_emoneglect", "CTQ_physabuse", "CTQ_physneglect", "CTQ_sexabuse", "CTQ_denial", "QES_total", "PANAS_negaffect", "PANAS_posaffect", "PANAS_fear", "PANAS_hostility", "PANAS_guilt", "PANAS_sadness", "PANAS_joviality", "PANAS_selfassure", "PANAS_attentive", "PANAS_shyness", "PANAS_fatigue", "PANAS_serenity", "PANAS_surprise", "RYFF_autonomy", "RYFF_envmastery", "RYFF_persgrowth", "RYFF_posrelations", "RYFF_purposelife", "RYFF_selfaccept", "STICSA_s_somatic", "STICSA_s_cognitive", "STICSA_t_somatic", "STICSA_t_cognitive", "WB_emohealth", "WB_physhealth", "WB_meanpurpose", "WB_charstrengths", "WB_socialconnect", "WB_financial", "DPES_total", "HILS_total", "IHS_total", "INDCOL_hi", "INDCOL_vi", "INDCOL_hc", "INDCOL_vc", "MHS_total", "PDSQ_mdd", "PDSQ_ptsd", "PDSQ_bulimia", "PDSQ_ocd", "PDSQ_panic", "PDSQ_psychosis", "PDSQ_agoraphobia", "PDSQ_social", "PDSQ_alcohol", "PDSQ_drugs", "PDSQ_somatization", "PDSQ_hypochondria", "HOPE_s_pathways", "HOPE_s_agency", "HOPE_t_pathways", "HOPE_t_agency", "SWLS_total", "ASI_physical", "ASI_cognitive", "ASI_social", "CIT_total", "DAST_total",  "DTS_total",  "LOT_total",  "MAIA_noticing", "MAIA_distracting", "MAIA_notworrying", "MAIA_attreg", "MAIA_emoaware", "MAIA_selfreg", "MAIA_bodylisten", "MAIA_trust",  "MLQ_presence", "MLQ_search", "NCS_total", "OASIS_total", "PCL_total", "PHQ_total",  "SHS_total", "TAS_dif", "TAS_ddf", "TAS_eot",  "VPS_total",  "WOLF_absorption", "WOLF_workenjoy", "WOLF_intrinmotiv", "BFI_extraversion", "BFI_agreeable", "BFI_conscientious", "BFI_neurotic", "BFI_openness", "FSS_absorption", "FSS_fluency", "SBI_anticipating", "SBI_savoring", "SBI_reminiscing", "STAI_S_total",  "STAI_T_total", "SVS_inddiff", "SVS_state", "TEPS_anticipatory", "TEPS_consummatory", "VHS_F1", "VHS_F2", "WHODAS_total", "WHODAS_days_with_difficulties", "WHODAS_days_totally_unable", "WHODAS_days_reduce_activities", "DFAS_total", "BAS_drive", "BAS_fun_seeking", "BAS_reward",  "BIS_total", "promis_emotion_raw", "promis_meaning_raw", "promis_sleep_raw","PROMIS_social_iso_raw", "PROMIS_social_sat_raw", "PROMIS_self_efficacy_raw", "PROMIS_self_efficacy_manage_raw")
measures_ls = c("id", "CTQ_emoabuse", "CTQ_emoneglect", "CTQ_physabuse", "CTQ_physneglect", "CTQ_sexabuse", "CTQ_denial", "QES_total", "PANAS_negaffect", "PANAS_posaffect", "RYFF_autonomy", "RYFF_envmastery", "RYFF_persgrowth", "RYFF_posrelations", "RYFF_purposelife", "RYFF_selfaccept", "STICSA_s_somatic", "STICSA_s_cognitive", "STICSA_t_somatic", "STICSA_t_cognitive", "WB_emohealth", "WB_physhealth", "WB_meanpurpose", "WB_charstrengths", "WB_socialconnect", "WB_financial", "DPES_total", "HILS_total", "IHS_total", "INDCOL_hi", "INDCOL_vi", "INDCOL_hc", "INDCOL_vc", "MHS_total", "HOPE_s_pathways", "HOPE_s_agency", "HOPE_t_pathways", "HOPE_t_agency", "SWLS_total", "ASI_physical", "ASI_cognitive", "ASI_social", "CIT_total", "DAST_total",  "DTS_total",  "LOT_total",  "MAIA_noticing", "MAIA_distracting", "MAIA_notworrying", "MAIA_attreg", "MAIA_emoaware", "MAIA_selfreg", "MAIA_bodylisten", "MAIA_trust",  "MLQ_presence", "MLQ_search", "NCS_total", "OASIS_total", "PCL_total", "PHQ_total",  "SHS_total", "TAS_dif", "TAS_ddf", "TAS_eot",  "VPS_total",  "WOLF_absorption", "WOLF_workenjoy", "WOLF_intrinmotiv", "BFI_extraversion", "BFI_agreeable", "BFI_conscientious", "BFI_neurotic", "BFI_openness", "FSS_absorption", "FSS_fluency", "SBI_anticipating", "SBI_savoring", "SBI_reminiscing", "STAI_S_total",  "STAI_T_total", "SVS_inddiff", "SVS_state", "TEPS_anticipatory", "TEPS_consummatory", "VHS_F1", "VHS_F2", "WHODAS_total", "WHODAS_days_with_difficulties", "WHODAS_days_totally_unable", "WHODAS_days_reduce_activities", "DFAS_total", "BAS_drive", "BAS_fun_seeking", "BAS_reward",  "BIS_total", "promis_emotion_raw", "promis_meaning_raw", "promis_sleep_raw","PROMIS_social_iso_raw", "PROMIS_social_sat_raw", "PROMIS_self_efficacy_raw", "PROMIS_self_efficacy_manage_raw")
q[1,1,10,]
G[1,1,10,]
q[1,1,10,]
(exp(-G[1,1,10,1])) / (exp(-G[1,1,10,1]) + exp(-G[1,1,10,2]) + exp(-G[1,1,10,3]))
# task ==============================================================
# loop over subjects
"NS" <-
3
"num.forced.choices" <-
3
"num.trials.per.block" <-
16
"num.blocks" <-
30
"all.actions" <-
structure(c(2,2,2,1,1,1,3,3,3,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,1,1,1,2,2,2,3,3,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,2,2,3,1,2,1,1,1,1,1,1,1,1,1,3,2,3,2,3,1,1,2,3,2,3,1,3,3,1,1,2,2,1,2,2,2,3,3,2,2,2,1,2,2,3,1,3,3,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,1,2,2,1,1,1,1,2,2,2,3,2,1,2,1,2,3,2,2,1,1,2,1,2,1,1,3,2,3,1,1,2,1,1,1,2,1,1,3,1,1,2,3,3,3,3,1,3,1,2,1,2,3,1,3,1,3,2,1,2,2,2,1,2,3,2,3,1,1,2,3,1,2,2,1,1,1,2,3,1,1,2,1,2,1,1,1,3,3,3,1,2,1,1,1,1,3,1,3,2,3,2,3,2,1,3,1,2,3,3,2,3,1,1,2,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,1,3,1,3,3,1,1,1,1,3,2,2,1,1,1,1,1,2,1,3,2,3,1,2,3,2,3,1,2,2,3,1,1,2,1,1,1,3,2,1,2,2,1,2,1,1,1,1,3,2,1,2,1,1,1,3,2,1,2,1,2,3,3,1,1,3,1,3,1,2,2,1,1,1,3,1,3,1,2,1,1,2,1,1,1,1,2,1,2,1,1,1,1,3,3,1,1,1,2,3,3,2,1,1,2,1,1,3,1,3,3,3,1,2,3,2,3,1,3,2,3,1,2,2,1,1,1,2,3,1,2,2,1,2,1,2,1,2,3,2,1,1,1,1,1,2,1,1,1,3,2,1,2,1,1,1,2,1,1,2,2,1,1,1,1,1,3,1,2,1,1,2,1,3,1,1,3,2,2,2,1,1,1,1,3,1,1,1,2,1,2,3,1,1,2,2,1,2,1,2,1,3,1,2,3,3,1,1,3,2,2,1,2,2,1,1,1,2,1,1,3,1,1,2,2,2,1,3,2,2,1,1,1,1,1,2,1,1,1,2,2,1,2,1,1,3,2,1,1,2,2,1,1,1,2,1,3,3,2,1,2,2,1,2,1,1,2,2,3,1,1,1,1,1,1,1,1,1,1,1,2,3,2,1,2,1,1,2,1,2,1,1,1,1,3,3,2,1,2,2,2,1,2,2,1,1,1,2,1,1,3,3,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,2,1,1,1,2,3,1,2,3,1,1,3,2,3,2,1,1,1,3,3,2,1,3,2,1,2,1,1,1,3,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,1,1,1,2,3,3,3,1,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,1,3,3,1,1,2,2,3,1,2,1,1,2,1,2,2,3,1,1,1,3,1,1,3,1,1,1,2,3,2,1,1,1,3,3,1,1,2,3,1,2,1,1,1,3,2,2,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,2,1,1,1,1,3,3,2,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,2,1,1,1,1,2,2,2,1,3,1,1,1,3,1,1,3,1,1,1,2,2,3,1,1,1,3,1,1,1,1,1,1,2,1,1,3,1,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,3,2,1,1,1,1,2,1,1,1,1,1,3,3,2,2,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,1,1,1,1,1,2,2,3,1,3,1,1,1,2,1,1,2,1,1,1,2,1,3,1,2,1,3,2,3,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,1,1,3,1,2,1,3,2,2,1,1,2,1,2,2,2,1,1,1,2,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,3,1,1,2,2,1,3,1,1,1,2,1,1,1,2,3,1,1,2,1,1,2,3,1,1,2,1,3,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,2,3,3,3,1,1,1,1,1,2,1,2,1,1,1,2,2,1,2,2,1,1,2,1,1,1,1,1,1,2,2,2,3,1,2,2,1,1,1,2,2,3,1,1,1,2,1,1,1,1,3,1,1,2,2,1,1,2,1,1,2,1,3,2,3,1,3,2,2,1,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,3,2,1,1,1,1,2,3,3,1,1,2,2,2,1,2,2,1,1,2,1,1,3,1,1,1,2,2,2,2,1,1,1,1,2,1,2,2,3,1,1,1,2,2,1,1,1,2,1,1,1,3,1,1,2,1,1,2,1,3,1,1,1,3,2,2,1,1,1,1,2,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,3,2,3,1,1,3,1,1,2,1,2,2,3,1,3,3,3,2,1,2,1,1,1,1,1,1,2,1,1,1,2,2,2,2,1,1,1,1,1,3,2,2,2,1,1,1,2,2,2,1,1,1,1,3,1,2,1,2,2,1,1,2,1,3), .Dim=c(3,30,16))
"all.observations" <-
structure(c(2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,3,3,3,2,1,1,2,3,1,1,2,3,1,1,1,3,3,2,2,1,3,2,1,2,1,1,3,3,3,2,3,3,3,3,3,1,2,1,1,1,1,2,3,3,2,2,3,1,2,2,2,1,3,3,2,1,1,2,2,1,2,3,3,2,1,1,1,1,3,2,1,2,2,1,1,1,3,2,2,2,3,2,2,2,3,2,3,1,3,3,3,2,1,2,2,1,1,3,3,1,1,1,1,1,1,2,2,1,3,1,1,2,3,2,1,3,1,3,1,2,3,2,3,1,3,3,2,1,1,3,2,2,1,1,3,2,1,1,3,1,3,1,1,2,1,1,2,2,3,1,3,2,1,1,1,1,1,3,1,2,1,2,1,1,1,3,2,1,3,3,2,2,2,2,1,1,1,3,3,3,2,1,1,1,1,1,2,1,3,1,1,2,3,2,1,3,2,2,1,2,1,3,1,3,3,1,3,1,2,3,2,2,3,2,3,3,1,2,1,3,2,3,3,2,1,2,3,1,3,1,3,1,2,3,1,1,1,3,2,2,2,2,1,2,1,3,1,3,3,1,1,3,1,2,3,3,2,3,2,2,2,2,2,2,1,3,3,3,1,2,2,3,1,2,3,1,3,3,1,1,2,1,2,3,2,1,2,2,2,2,2,1,1,3,3,1,1,1,2,3,3,2,3,3,1,1,1,3,1,3,3,2,1,2,3,2,3,3,2,2,3,1,2,1,1,1,1,1,3,1,3,2,1,2,3,2,3,3,3,1,1,1,3,2,1,2,1,1,1,3,2,1,2,2,2,3,1,1,3,2,2,1,2,1,2,1,1,2,2,2,3,1,1,2,2,1,3,2,2,2,1,2,2,1,3,1,1,1,2,1,2,2,3,3,2,3,1,2,3,2,2,3,1,2,1,1,3,2,3,1,2,3,1,2,2,1,1,2,2,1,3,3,3,3,2,2,1,3,2,2,3,2,1,3,1,2,1,3,2,3,2,1,2,3,1,3,3,1,1,2,2,3,2,3,2,1,3,1,2,2,2,2,1,1,1,2,3,2,3,1,1,1,1,2,1,1,3,3,1,1,2,3,2,1,3,1,1,2,3,1,1,2,2,1,3,1,3,1,2,1,2,1,1,2,2,1,2,3,2,1,3,3,1,1,3,2,1,1,1,2,2,1,3,1,1,3,2,3,1,2,1,1,2,3,2,2,3,1,1,3,2,3,2,1,3,3,1,3,2,1,3,3,2,2,1,3,2,2,2,3,2,1,1,1,1,1,1,1,2,1,2,3,2,3,1,3,2,1,1,3,2,1,1,2,3,2,1,3,1,1,2,1,2,1,2,1,2,1,2,2,2,3,3,1,3,3,3,1,1,2,3,1,2,1,1,2,2,2,2,2,1,1,1,3,3,1,1,3,1,1,2,3,2,1,1,1,1,3,2,1,3,3,1,1,1,1,3,3,3,3,3,3,2,1,2,3,1,1,2,3,2,1,2,3,3,1,3,1,1,1,1,3,3,1,1,2,2,2,2,2,3,1,1,1,1,1,1,2,1,1,1,3,1,1,2,2,1,1,1,2,2,3,2,1,3,1,1,2,1,3,3,3,1,2,3,1,3,3,3,1,2,2,3,1,2,1,3,2,1,1,1,1,1,2,1,1,2,1,1,3,1,2,1,2,1,3,1,2,2,1,2,1,1,1,3,1,3,3,1,1,2,3,1,1,3,3,2,2,2,1,3,1,2,1,1,2,1,1,1,1,3,1,1,2,3,2,1,1,2,2,3,3,1,1,1,3,2,3,1,3,2,1,1,1,3,1,2,3,2,1,1,1,1,2,2,2,3,2,3,1,2,1,3,2,2,3,3,2,1,2,1,1,1,1,3,3,1,1,2,2,1,3,2,2,2,1,3,2,1,2,2,1,1,1,1,1,3,2,3,2,1,1,3,1,1,1,1,2,1,2,1,2,3,2,1,3,3,1,2,2,3,3,1,1,1,2,3,2,1,2,2,1,3,2,3,1,2,3,1,1,2,1,1,2,2,1,2,2,1,1,1,2,1,2,1,1,1,3,2,1,1,2,1,2,1,3,3,1,3,3,1,1,3,3,1,3,1,3,1,2,3,3,3,1,3,2,2,1,2,2,1,1,2,1,2,3,1,1,2,2,2,3,2,3,2,3,3,1,3,2,1,1,3,1,1,2,3,1,1,2,3,3,2,2,2,3,2,2,3,1,2,2,3,2,3,3,3,2,1,2,1,2,1,3,1,1,2,3,1,1,1,2,1,2,1,1,1,2,1,2,2,3,1,3,2,3,1,3,2,2,3,1,1,3,2,3,2,1,1,2,3,3,2,3,1,2,1,1,1,1,2,2,3,3,1,3,1,2,3,3,1,3,1,3,1,2,3,3,2,3,2,3,3,3,3,3,3,2,3,3,2,1,1,1,3,1,3,2,2,1,1,3,2,1,1,3,2,2,1,3,2,1,2,1,2,3,1,1,1,3,3,3,1,1,3,2,3,3,3,2,2,1,1,3,1,2,2,3,2,3,1,1,1,3,1,1,1,3,1,1,2,2,2,3,2,3,3,1,3,2,1,2,1,1,2,2,2,2,1,2,1,1,2,1,2,3,2,3,2,3,3,1,1), .Dim=c(3,30,16))
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- (a[s,b,t-1,k,pol] - pa[s])*(1-omega[s]) + pa
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
q[1,1,10,]
G[1,1,10,]
G
G[1,1,10,]
# loop over subjects
"NS" <-
3
"num.forced.choices" <-
3
"num.trials.per.block" <-
16
"num.blocks" <-
30
"all.actions" <-
structure(c(2,2,2,1,1,1,3,3,3,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,1,1,1,2,2,2,3,3,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,2,2,3,1,2,1,1,1,1,1,1,1,1,1,3,2,3,2,3,1,1,2,3,2,3,1,3,3,1,1,2,2,1,2,2,2,3,3,2,2,2,1,2,2,3,1,3,3,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,1,2,2,1,1,1,1,2,2,2,3,2,1,2,1,2,3,2,2,1,1,2,1,2,1,1,3,2,3,1,1,2,1,1,1,2,1,1,3,1,1,2,3,3,3,3,1,3,1,2,1,2,3,1,3,1,3,2,1,2,2,2,1,2,3,2,3,1,1,2,3,1,2,2,1,1,1,2,3,1,1,2,1,2,1,1,1,3,3,3,1,2,1,1,1,1,3,1,3,2,3,2,3,2,1,3,1,2,3,3,2,3,1,1,2,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,1,3,1,3,3,1,1,1,1,3,2,2,1,1,1,1,1,2,1,3,2,3,1,2,3,2,3,1,2,2,3,1,1,2,1,1,1,3,2,1,2,2,1,2,1,1,1,1,3,2,1,2,1,1,1,3,2,1,2,1,2,3,3,1,1,3,1,3,1,2,2,1,1,1,3,1,3,1,2,1,1,2,1,1,1,1,2,1,2,1,1,1,1,3,3,1,1,1,2,3,3,2,1,1,2,1,1,3,1,3,3,3,1,2,3,2,3,1,3,2,3,1,2,2,1,1,1,2,3,1,2,2,1,2,1,2,1,2,3,2,1,1,1,1,1,2,1,1,1,3,2,1,2,1,1,1,2,1,1,2,2,1,1,1,1,1,3,1,2,1,1,2,1,3,1,1,3,2,2,2,1,1,1,1,3,1,1,1,2,1,2,3,1,1,2,2,1,2,1,2,1,3,1,2,3,3,1,1,3,2,2,1,2,2,1,1,1,2,1,1,3,1,1,2,2,2,1,3,2,2,1,1,1,1,1,2,1,1,1,2,2,1,2,1,1,3,2,1,1,2,2,1,1,1,2,1,3,3,2,1,2,2,1,2,1,1,2,2,3,1,1,1,1,1,1,1,1,1,1,1,2,3,2,1,2,1,1,2,1,2,1,1,1,1,3,3,2,1,2,2,2,1,2,2,1,1,1,2,1,1,3,3,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,2,1,1,1,2,3,1,2,3,1,1,3,2,3,2,1,1,1,3,3,2,1,3,2,1,2,1,1,1,3,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,1,1,1,2,3,3,3,1,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,1,3,3,1,1,2,2,3,1,2,1,1,2,1,2,2,3,1,1,1,3,1,1,3,1,1,1,2,3,2,1,1,1,3,3,1,1,2,3,1,2,1,1,1,3,2,2,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,2,1,1,1,1,3,3,2,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,2,1,1,1,1,2,2,2,1,3,1,1,1,3,1,1,3,1,1,1,2,2,3,1,1,1,3,1,1,1,1,1,1,2,1,1,3,1,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,3,2,1,1,1,1,2,1,1,1,1,1,3,3,2,2,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,1,1,1,1,1,2,2,3,1,3,1,1,1,2,1,1,2,1,1,1,2,1,3,1,2,1,3,2,3,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,1,1,3,1,2,1,3,2,2,1,1,2,1,2,2,2,1,1,1,2,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,3,1,1,2,2,1,3,1,1,1,2,1,1,1,2,3,1,1,2,1,1,2,3,1,1,2,1,3,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,2,3,3,3,1,1,1,1,1,2,1,2,1,1,1,2,2,1,2,2,1,1,2,1,1,1,1,1,1,2,2,2,3,1,2,2,1,1,1,2,2,3,1,1,1,2,1,1,1,1,3,1,1,2,2,1,1,2,1,1,2,1,3,2,3,1,3,2,2,1,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,3,2,1,1,1,1,2,3,3,1,1,2,2,2,1,2,2,1,1,2,1,1,3,1,1,1,2,2,2,2,1,1,1,1,2,1,2,2,3,1,1,1,2,2,1,1,1,2,1,1,1,3,1,1,2,1,1,2,1,3,1,1,1,3,2,2,1,1,1,1,2,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,3,2,3,1,1,3,1,1,2,1,2,2,3,1,3,3,3,2,1,2,1,1,1,1,1,1,2,1,1,1,2,2,2,2,1,1,1,1,1,3,2,2,2,1,1,1,2,2,2,1,1,1,1,3,1,2,1,2,2,1,1,2,1,3), .Dim=c(3,30,16))
"all.observations" <-
structure(c(2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,3,3,3,2,1,1,2,3,1,1,2,3,1,1,1,3,3,2,2,1,3,2,1,2,1,1,3,3,3,2,3,3,3,3,3,1,2,1,1,1,1,2,3,3,2,2,3,1,2,2,2,1,3,3,2,1,1,2,2,1,2,3,3,2,1,1,1,1,3,2,1,2,2,1,1,1,3,2,2,2,3,2,2,2,3,2,3,1,3,3,3,2,1,2,2,1,1,3,3,1,1,1,1,1,1,2,2,1,3,1,1,2,3,2,1,3,1,3,1,2,3,2,3,1,3,3,2,1,1,3,2,2,1,1,3,2,1,1,3,1,3,1,1,2,1,1,2,2,3,1,3,2,1,1,1,1,1,3,1,2,1,2,1,1,1,3,2,1,3,3,2,2,2,2,1,1,1,3,3,3,2,1,1,1,1,1,2,1,3,1,1,2,3,2,1,3,2,2,1,2,1,3,1,3,3,1,3,1,2,3,2,2,3,2,3,3,1,2,1,3,2,3,3,2,1,2,3,1,3,1,3,1,2,3,1,1,1,3,2,2,2,2,1,2,1,3,1,3,3,1,1,3,1,2,3,3,2,3,2,2,2,2,2,2,1,3,3,3,1,2,2,3,1,2,3,1,3,3,1,1,2,1,2,3,2,1,2,2,2,2,2,1,1,3,3,1,1,1,2,3,3,2,3,3,1,1,1,3,1,3,3,2,1,2,3,2,3,3,2,2,3,1,2,1,1,1,1,1,3,1,3,2,1,2,3,2,3,3,3,1,1,1,3,2,1,2,1,1,1,3,2,1,2,2,2,3,1,1,3,2,2,1,2,1,2,1,1,2,2,2,3,1,1,2,2,1,3,2,2,2,1,2,2,1,3,1,1,1,2,1,2,2,3,3,2,3,1,2,3,2,2,3,1,2,1,1,3,2,3,1,2,3,1,2,2,1,1,2,2,1,3,3,3,3,2,2,1,3,2,2,3,2,1,3,1,2,1,3,2,3,2,1,2,3,1,3,3,1,1,2,2,3,2,3,2,1,3,1,2,2,2,2,1,1,1,2,3,2,3,1,1,1,1,2,1,1,3,3,1,1,2,3,2,1,3,1,1,2,3,1,1,2,2,1,3,1,3,1,2,1,2,1,1,2,2,1,2,3,2,1,3,3,1,1,3,2,1,1,1,2,2,1,3,1,1,3,2,3,1,2,1,1,2,3,2,2,3,1,1,3,2,3,2,1,3,3,1,3,2,1,3,3,2,2,1,3,2,2,2,3,2,1,1,1,1,1,1,1,2,1,2,3,2,3,1,3,2,1,1,3,2,1,1,2,3,2,1,3,1,1,2,1,2,1,2,1,2,1,2,2,2,3,3,1,3,3,3,1,1,2,3,1,2,1,1,2,2,2,2,2,1,1,1,3,3,1,1,3,1,1,2,3,2,1,1,1,1,3,2,1,3,3,1,1,1,1,3,3,3,3,3,3,2,1,2,3,1,1,2,3,2,1,2,3,3,1,3,1,1,1,1,3,3,1,1,2,2,2,2,2,3,1,1,1,1,1,1,2,1,1,1,3,1,1,2,2,1,1,1,2,2,3,2,1,3,1,1,2,1,3,3,3,1,2,3,1,3,3,3,1,2,2,3,1,2,1,3,2,1,1,1,1,1,2,1,1,2,1,1,3,1,2,1,2,1,3,1,2,2,1,2,1,1,1,3,1,3,3,1,1,2,3,1,1,3,3,2,2,2,1,3,1,2,1,1,2,1,1,1,1,3,1,1,2,3,2,1,1,2,2,3,3,1,1,1,3,2,3,1,3,2,1,1,1,3,1,2,3,2,1,1,1,1,2,2,2,3,2,3,1,2,1,3,2,2,3,3,2,1,2,1,1,1,1,3,3,1,1,2,2,1,3,2,2,2,1,3,2,1,2,2,1,1,1,1,1,3,2,3,2,1,1,3,1,1,1,1,2,1,2,1,2,3,2,1,3,3,1,2,2,3,3,1,1,1,2,3,2,1,2,2,1,3,2,3,1,2,3,1,1,2,1,1,2,2,1,2,2,1,1,1,2,1,2,1,1,1,3,2,1,1,2,1,2,1,3,3,1,3,3,1,1,3,3,1,3,1,3,1,2,3,3,3,1,3,2,2,1,2,2,1,1,2,1,2,3,1,1,2,2,2,3,2,3,2,3,3,1,3,2,1,1,3,1,1,2,3,1,1,2,3,3,2,2,2,3,2,2,3,1,2,2,3,2,3,3,3,2,1,2,1,2,1,3,1,1,2,3,1,1,1,2,1,2,1,1,1,2,1,2,2,3,1,3,2,3,1,3,2,2,3,1,1,3,2,3,2,1,1,2,3,3,2,3,1,2,1,1,1,1,2,2,3,3,1,3,1,2,3,3,1,3,1,3,1,2,3,3,2,3,2,3,3,3,3,3,3,2,3,3,2,1,1,1,3,1,3,2,2,1,1,3,2,1,1,3,2,2,1,3,2,1,2,1,2,3,1,1,1,3,3,3,1,1,3,2,3,3,3,2,2,1,1,3,1,2,2,3,2,3,1,1,1,3,1,1,1,3,1,1,2,2,2,3,2,3,3,1,3,2,1,2,1,1,2,2,2,2,1,2,1,1,2,1,2,3,2,3,2,3,3,1,1), .Dim=c(3,30,16))
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- (a[s,b,t-1,k,pol] - pa[s])*(1-omega[s]) + pa
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
}
for (pol in 1:3){
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
}
for (pol in 1:3) {
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) <= 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
q[1,1,10,]
action.probs[1,1,10,]
transformed.q[s,b,t,pol]
transformed.q[1,1,10,]
# loop over subjects
"NS" <-
3
"num.forced.choices" <-
3
"num.trials.per.block" <-
16
"num.blocks" <-
30
"all.actions" <-
structure(c(2,2,2,1,1,1,3,3,3,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,1,1,1,2,2,2,3,3,3,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,2,2,3,1,2,1,1,1,1,1,1,1,1,1,3,2,3,2,3,1,1,2,3,2,3,1,3,3,1,1,2,2,1,2,2,2,3,3,2,2,2,1,2,2,3,1,3,3,2,1,1,1,2,1,2,1,1,2,1,1,1,3,1,2,1,2,2,1,1,1,1,2,2,2,3,2,1,2,1,2,3,2,2,1,1,2,1,2,1,1,3,2,3,1,1,2,1,1,1,2,1,1,3,1,1,2,3,3,3,3,1,3,1,2,1,2,3,1,3,1,3,2,1,2,2,2,1,2,3,2,3,1,1,2,3,1,2,2,1,1,1,2,3,1,1,2,1,2,1,1,1,3,3,3,1,2,1,1,1,1,3,1,3,2,3,2,3,2,1,3,1,2,3,3,2,3,1,1,2,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,1,3,1,3,3,1,1,1,1,3,2,2,1,1,1,1,1,2,1,3,2,3,1,2,3,2,3,1,2,2,3,1,1,2,1,1,1,3,2,1,2,2,1,2,1,1,1,1,3,2,1,2,1,1,1,3,2,1,2,1,2,3,3,1,1,3,1,3,1,2,2,1,1,1,3,1,3,1,2,1,1,2,1,1,1,1,2,1,2,1,1,1,1,3,3,1,1,1,2,3,3,2,1,1,2,1,1,3,1,3,3,3,1,2,3,2,3,1,3,2,3,1,2,2,1,1,1,2,3,1,2,2,1,2,1,2,1,2,3,2,1,1,1,1,1,2,1,1,1,3,2,1,2,1,1,1,2,1,1,2,2,1,1,1,1,1,3,1,2,1,1,2,1,3,1,1,3,2,2,2,1,1,1,1,3,1,1,1,2,1,2,3,1,1,2,2,1,2,1,2,1,3,1,2,3,3,1,1,3,2,2,1,2,2,1,1,1,2,1,1,3,1,1,2,2,2,1,3,2,2,1,1,1,1,1,2,1,1,1,2,2,1,2,1,1,3,2,1,1,2,2,1,1,1,2,1,3,3,2,1,2,2,1,2,1,1,2,2,3,1,1,1,1,1,1,1,1,1,1,1,2,3,2,1,2,1,1,2,1,2,1,1,1,1,3,3,2,1,2,2,2,1,2,2,1,1,1,2,1,1,3,3,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,2,1,1,1,2,3,1,2,3,1,1,3,2,3,2,1,1,1,3,3,2,1,3,2,1,2,1,1,1,3,2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,1,1,1,2,3,3,3,1,2,2,2,1,2,1,1,1,1,1,2,1,1,1,1,1,3,3,1,1,2,2,3,1,2,1,1,2,1,2,2,3,1,1,1,3,1,1,3,1,1,1,2,3,2,1,1,1,3,3,1,1,2,3,1,2,1,1,1,3,2,2,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,1,1,1,1,2,2,1,1,1,1,3,3,2,2,2,2,1,1,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,2,1,1,1,1,2,2,2,1,3,1,1,1,3,1,1,3,1,1,1,2,2,3,1,1,1,3,1,1,1,1,1,1,2,1,1,3,1,1,3,1,1,1,1,1,1,1,1,2,1,2,1,3,3,2,1,1,1,1,2,1,1,1,1,1,3,3,2,2,2,1,1,2,1,1,1,1,1,1,2,1,2,1,1,2,3,1,1,2,2,1,1,1,1,1,2,2,3,1,3,1,1,1,2,1,1,2,1,1,1,2,1,3,1,2,1,3,2,3,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,1,1,3,1,2,1,3,2,2,1,1,2,1,2,2,2,1,1,1,2,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,3,1,1,2,2,1,3,1,1,1,2,1,1,1,2,3,1,1,2,1,1,2,3,1,1,2,1,3,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,2,3,3,3,1,1,1,1,1,2,1,2,1,1,1,2,2,1,2,2,1,1,2,1,1,1,1,1,1,2,2,2,3,1,2,2,1,1,1,2,2,3,1,1,1,2,1,1,1,1,3,1,1,2,2,1,1,2,1,1,2,1,3,2,3,1,3,2,2,1,1,1,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,3,2,1,1,1,1,2,3,3,1,1,2,2,2,1,2,2,1,1,2,1,1,3,1,1,1,2,2,2,2,1,1,1,1,2,1,2,2,3,1,1,1,2,2,1,1,1,2,1,1,1,3,1,1,2,1,1,2,1,3,1,1,1,3,2,2,1,1,1,1,2,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,3,2,3,1,1,3,1,1,2,1,2,2,3,1,3,3,3,2,1,2,1,1,1,1,1,1,2,1,1,1,2,2,2,2,1,1,1,1,1,3,2,2,2,1,1,1,2,2,2,1,1,1,1,3,1,2,1,2,2,1,1,2,1,3), .Dim=c(3,30,16))
"all.observations" <-
structure(c(2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,3,3,3,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,1,1,1,3,3,3,2,2,2,1,1,1,1,1,1,3,3,3,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,3,3,3,2,1,1,2,3,1,1,2,3,1,1,1,3,3,2,2,1,3,2,1,2,1,1,3,3,3,2,3,3,3,3,3,1,2,1,1,1,1,2,3,3,2,2,3,1,2,2,2,1,3,3,2,1,1,2,2,1,2,3,3,2,1,1,1,1,3,2,1,2,2,1,1,1,3,2,2,2,3,2,2,2,3,2,3,1,3,3,3,2,1,2,2,1,1,3,3,1,1,1,1,1,1,2,2,1,3,1,1,2,3,2,1,3,1,3,1,2,3,2,3,1,3,3,2,1,1,3,2,2,1,1,3,2,1,1,3,1,3,1,1,2,1,1,2,2,3,1,3,2,1,1,1,1,1,3,1,2,1,2,1,1,1,3,2,1,3,3,2,2,2,2,1,1,1,3,3,3,2,1,1,1,1,1,2,1,3,1,1,2,3,2,1,3,2,2,1,2,1,3,1,3,3,1,3,1,2,3,2,2,3,2,3,3,1,2,1,3,2,3,3,2,1,2,3,1,3,1,3,1,2,3,1,1,1,3,2,2,2,2,1,2,1,3,1,3,3,1,1,3,1,2,3,3,2,3,2,2,2,2,2,2,1,3,3,3,1,2,2,3,1,2,3,1,3,3,1,1,2,1,2,3,2,1,2,2,2,2,2,1,1,3,3,1,1,1,2,3,3,2,3,3,1,1,1,3,1,3,3,2,1,2,3,2,3,3,2,2,3,1,2,1,1,1,1,1,3,1,3,2,1,2,3,2,3,3,3,1,1,1,3,2,1,2,1,1,1,3,2,1,2,2,2,3,1,1,3,2,2,1,2,1,2,1,1,2,2,2,3,1,1,2,2,1,3,2,2,2,1,2,2,1,3,1,1,1,2,1,2,2,3,3,2,3,1,2,3,2,2,3,1,2,1,1,3,2,3,1,2,3,1,2,2,1,1,2,2,1,3,3,3,3,2,2,1,3,2,2,3,2,1,3,1,2,1,3,2,3,2,1,2,3,1,3,3,1,1,2,2,3,2,3,2,1,3,1,2,2,2,2,1,1,1,2,3,2,3,1,1,1,1,2,1,1,3,3,1,1,2,3,2,1,3,1,1,2,3,1,1,2,2,1,3,1,3,1,2,1,2,1,1,2,2,1,2,3,2,1,3,3,1,1,3,2,1,1,1,2,2,1,3,1,1,3,2,3,1,2,1,1,2,3,2,2,3,1,1,3,2,3,2,1,3,3,1,3,2,1,3,3,2,2,1,3,2,2,2,3,2,1,1,1,1,1,1,1,2,1,2,3,2,3,1,3,2,1,1,3,2,1,1,2,3,2,1,3,1,1,2,1,2,1,2,1,2,1,2,2,2,3,3,1,3,3,3,1,1,2,3,1,2,1,1,2,2,2,2,2,1,1,1,3,3,1,1,3,1,1,2,3,2,1,1,1,1,3,2,1,3,3,1,1,1,1,3,3,3,3,3,3,2,1,2,3,1,1,2,3,2,1,2,3,3,1,3,1,1,1,1,3,3,1,1,2,2,2,2,2,3,1,1,1,1,1,1,2,1,1,1,3,1,1,2,2,1,1,1,2,2,3,2,1,3,1,1,2,1,3,3,3,1,2,3,1,3,3,3,1,2,2,3,1,2,1,3,2,1,1,1,1,1,2,1,1,2,1,1,3,1,2,1,2,1,3,1,2,2,1,2,1,1,1,3,1,3,3,1,1,2,3,1,1,3,3,2,2,2,1,3,1,2,1,1,2,1,1,1,1,3,1,1,2,3,2,1,1,2,2,3,3,1,1,1,3,2,3,1,3,2,1,1,1,3,1,2,3,2,1,1,1,1,2,2,2,3,2,3,1,2,1,3,2,2,3,3,2,1,2,1,1,1,1,3,3,1,1,2,2,1,3,2,2,2,1,3,2,1,2,2,1,1,1,1,1,3,2,3,2,1,1,3,1,1,1,1,2,1,2,1,2,3,2,1,3,3,1,2,2,3,3,1,1,1,2,3,2,1,2,2,1,3,2,3,1,2,3,1,1,2,1,1,2,2,1,2,2,1,1,1,2,1,2,1,1,1,3,2,1,1,2,1,2,1,3,3,1,3,3,1,1,3,3,1,3,1,3,1,2,3,3,3,1,3,2,2,1,2,2,1,1,2,1,2,3,1,1,2,2,2,3,2,3,2,3,3,1,3,2,1,1,3,1,1,2,3,1,1,2,3,3,2,2,2,3,2,2,3,1,2,2,3,2,3,3,3,2,1,2,1,2,1,3,1,1,2,3,1,1,1,2,1,2,1,1,1,2,1,2,2,3,1,3,2,3,1,3,2,2,3,1,1,3,2,3,2,1,1,2,3,3,2,3,1,2,1,1,1,1,2,2,3,3,1,3,1,2,3,3,1,3,1,3,1,2,3,3,2,3,2,3,3,3,3,3,3,2,3,3,2,1,1,1,3,1,3,2,2,1,1,3,2,1,1,3,2,2,1,3,2,1,2,1,2,3,1,1,1,3,3,3,1,1,3,2,3,3,3,2,2,1,1,3,1,2,2,3,2,3,1,1,1,3,1,1,1,3,1,1,2,2,2,3,2,3,3,1,3,2,1,2,1,1,2,2,2,2,1,2,1,1,2,1,2,3,2,3,2,3,3,1,1), .Dim=c(3,30,16))
a = array(NA, dim=c(3,30,16,3,3))
A = array(NA, dim=c(3,30,16,3,3))
a.sums = array(NA, dim=c(3,30,16,3,3))
info.gain = array(NA, dim=c(3,30,16,3,3))
count.to.add = array(NA, dim=c(3,30,16,3,3))
counts.remembered = array(NA, dim=c(3,30,16,3,3))
epistemic.value = array(NA, dim=c(3,30,16,3))
G = array(NA, dim=c(3,30,16,3))
pragmatic.value = array(NA, dim=c(3,30,16,3))
q = array(NA, dim=c(3,30,16,3))
transformed.q = array(NA, dim=c(3,30,16,3))
action.probs = array(NA, dim=c(3,30,16,3))
C = array(NA,dim=c(3,3))
softmaxed.C = array(NA,dim=c(3,3))
s = 1
pa = .25
eta = .5
cr = 4
cl = 4
alpha = 4
omega = .25
C[s,1] <- cr[s]
C[s,2] <- 0
C[s,3] <- -cl[s]
softmaxed.C[s,1] = exp(C[s,1])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,2] = exp(C[s,2])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
softmaxed.C[s,3] = exp(C[s,3])/(exp(C[s,1]) + exp(C[s,2]) + exp(C[s,3]))
for (b in 1:num.blocks) {
for (pol in 1:3) {
for (k in 1:3) {
a[s,b,1,k,pol] = pa[s]
}
}
for (t in 2:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
count.to.add[s,b,t,k,pol] <- ifelse((k == all.observations[s,b,t-1]) && (pol == all.actions[s,b,t-1]),eta[s],0)
counts.remembered[s,b,t,k,pol] <- (a[s,b,t-1,k,pol] - pa[s])*(1-omega[s]) + pa
a[s,b,t,k,pol] <- counts.remembered[s,b,t,k,pol] + count.to.add[s,b,t,k,pol]
}
}
}
for (t in 4:num.trials.per.block) {
for (pol in 1:3) {
for (k in 1:3) {
A[s,b,t,k,pol] <- a[s,b,t,k,pol]/(a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
a.sums[s,b,t,k,pol] = (a[s,b,t,1,pol] + a[s,b,t,2,pol] + a[s,b,t,3,pol])
info.gain[s,b,t,k,pol] = .5*((a[s,b,t,k,pol]^-1)-(a.sums[s,b,t,k,pol]^-1))
}
epistemic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * info.gain[s,b,t,,pol])
pragmatic.value[s,b,t,pol] <- sum(A[s,b,t,,pol] * log(softmaxed.C[s,]))
G[s,b,t,pol] <- -epistemic.value[s,b,t,pol] - pragmatic.value[s,b,t,pol]
}
for (pol in 1:3){
q[s,b,t,pol] <- (exp(-G[s,b,t,pol])) / (exp(-G[s,b,t,1]) + exp(-G[s,b,t,2]) + exp(-G[s,b,t,3]))
transformed.q[s,b,t,pol] <- alpha[s] * log(q[s,b,t,pol])
}
for (pol in 1:3) {
action.probs[s,b,t,pol] <- ifelse((transformed.q[s,b,t,1] + transformed.q[s,b,t,2] + transformed.q[s,b,t,3]) == 0, 1/3, exp(transformed.q[s,b,t,pol]) / (exp(transformed.q[s,b,t,1]) + exp(transformed.q[s,b,t,2]) + exp(transformed.q[s,b,t,3])))
}
# all.actions[s, b, t] ~ dcat(action.probs[s,b,t,])
}
}
action.probs[1,1,10,]
